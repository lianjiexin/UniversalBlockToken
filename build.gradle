
plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'idea'
apply plugin: 'eclipse'



ext {
    springBootVersion = "2.2.4.RELEASE"
    springCloudVersion = "Hoxton.SR1"
    mybatisStarterVersion = '2.1.0'
    swaggerVersion = '2.9.2'
    lombokVersion = '1.18.10'
    web3jVersion = '3.4.0'
    httpclientVersion = '4.5.2'
}


allprojects {
    group = 'io.github.alphajiang'
    //version = '0.0.22.20200315-SNAPSHOT'
    version = '0.0.21'
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.encoding = "UTF-8"
    }


    test.onlyIf { ! Boolean.getBoolean('skipTests') }

    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        jcenter { url 'https://maven.aliyun.com/repository/jcenter' }
    }
    repositories {
        mavenCentral()
    }



}

bootJar {
    enabled = false
}
jar {
    enabled = false
}



subprojects {

    apply plugin: 'maven'
    apply plugin: 'signing'
    //apply plugin: 'io.spring.dependency-management'


    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        // un-comment the line for release signing
        // sign configurations.archives
    }




    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: snapshotRepoUrl) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'hyena'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Micro service for user score hosting. '
                    url 'https://github.com/alphajiang/hyena'

                    scm {
                        connection 'https://github.com/alphajiang/hyena.git'
                        developerConnection 'https://github.com/alphajiang/hyena.git'
                        url 'https://github.com/alphajiang/hyena.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'alphajiang'
                            name 'Alpha Jiang'
                            email 'alphajiang@163.com'
                        }
                    }
                }
            }
        }
    }

    dependencies {


        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

        testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}"){
            exclude group: 'junit'
        }

//        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
//        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }
}
// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path == ':hyena-core' }

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from = publishedProjects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = publishedProjects.sourceSets.main.allSource.srcDirs
    classDirectories.from = publishedProjects.sourceSets.main.output
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    //onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}